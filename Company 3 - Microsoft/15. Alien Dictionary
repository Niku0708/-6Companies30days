class Solution{
    public:
    void dfs(int src, set<int> graph[], vector<bool> &visited, string &ans)
    {
        for(auto itr:graph[src])
        {
            if(!visited[itr])
            {
                visited[itr] = true;
                dfs(itr, graph, visited, ans);
            }
        }
        ans.insert(0, 1, src+'a');
    }
    
    string findOrder(string dict[], int N, int K) {
        //code here
        set<int> graph[K];
        for(int i=1; i<N; i++)
        {
            string s1 = dict[i-1], s2 = dict[i];
            for(int j=0; j<s1.length() and j<s2.length(); j++)
            {
                if(s1[j] != s2[j])
                {
                    graph[s1[j]-'a'].insert(s2[j]-'a');
                    break;
                }
            }
        }
        
        // for(int i=0; i<K; i++)
        // {
        //     cout<<i<<"->";
        //     for(auto e:graph[i])
        //         cout<<e<<", ";
        //     cout<<"\n";
        // }
        
        
        string ans;
        vector<bool> visited(K, false);
        for(int i=0; i<K; i++)
        {
            if(!visited[i])
            {
                visited[i] = true;
                dfs(i, graph, visited, ans);
            }
        }
        return ans;
    }
};
