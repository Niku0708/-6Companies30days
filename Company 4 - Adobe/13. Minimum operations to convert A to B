class Solution {
  public:
    int minInsAndDel(int A[], int B[], int N, int M) {
        vector<vector<int>> dp(N, vector<int> (M, 0));
        dp[0][0] = A[0] == B[0] ? 1:0;
        for(int j=1; j<M; j++)
            dp[0][j] = (A[0] == B[j] ? 1:dp[0][j-1]);
        for(int i=1; i<N; i++)
            dp[i][0] = (A[i] == B[0] ? 1:dp[i-1][0]);
            
        for(int i=1; i<N; i++)
        {
            for(int j=1; j<M; j++)
            {
                dp[i][j] = (A[i] == B[j] ? dp[i-1][j-1]+1 : max({dp[i][j-1], dp[i-1][j]}));
            }
        }
        stack<int> lcs;
        for(int i=N-1, j=M-1; i>=0 and j>=0; )
        {
            if(A[i] == B[j]){
                lcs.push(A[i]);
                i--, j--;
            }
            else
            {
                if(dp[i-1][j] > dp[i][j-1])
                    i--;
                else
                    j--;
            }
        }
        // while(!lcs.empty())
        // {
        //     cout<<lcs.top()<<" ";
        //     lcs.pop();
        // }
        int ans = 0, a = 0, b=0, i=0, j=0;
        while(!lcs.empty())
        {
            while(A[i] != lcs.top())
                i++,a++;
            while(B[j] != lcs.top())
                j++, b++;
            // cout<<A[i]<<" "<<B[j]<<"\n";
            ans += (a+b);
            a=0, b=0, i++, j++;
            lcs.pop();
        }
        ans += (N-i + M-j);
        return ans;
    }
};
