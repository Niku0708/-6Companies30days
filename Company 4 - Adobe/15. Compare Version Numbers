vector<long long> parse(string A)
{
    vector<long long> ans;
    if(A.empty())
        return ans;
    long long version = 0;
    for(int i=0; i<A.length(); i++)
    {
        if(A[i] == '.')
        {
            ans.push_back(version);
            version = 0;
            continue;
        }
        int digit = A[i]-'0';
        version = version*10 + digit;
    }
    ans.push_back(version);
    return ans;
}

string version(string &A)
{
    string ans;
    for(int i=0; i<A.length(); i++)
    {
        if(A[i] == '.')
        {
            ans = A.substr(0, i);
            A = A.substr(i+1);
            while(ans.length()>1 and ans[0] == '0')
                ans = ans.substr(1);
            return ans;
        }
    }
    ans = A;
    A = "";
    while(ans.length()>1 and ans[0] == '0')
        ans = ans.substr(1);
    return ans;
}

int Solution::compareVersion(string A, string B) {

    while(!A.empty() and !B.empty())
    {
        string first = version(A);
        string second = version(B);
        if(first.length() > second.length())
            return 1;
        else if(first.length() < second.length())
            return -1;
        else{
            if(first > second)
                return 1;
            else if(first<second)
                return -1;
        }
    }
    if(A.empty())
    {
        string first = "0";
        string second = version(B);
        if(first<second)
            return -1;
    }
    else if(B.empty())
    {
        string first = version(A);
        string second = "0";
        if(first > second)
            return 1;
    }
    return 0;
}
