class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
            queue<pair<int, int>> q;
        int fresh = 0;
        int m = grid.size(), n = grid[0].size();
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(grid[i][j] == 1)
                    fresh++;
                else if(grid[i][j] == 2)
                    q.push({i, j});
            }
        }
        
        int dir[] = {-1, 0, 1, 0, -1};
        
        q.push({-1, -1});
        int time = 0;
        while(!q.empty())
        {
            pair<int, int> tomato = q.front();
            q.pop();
            if(tomato.first == -1)
            {
                if(q.empty())
                    break;
                else{
                    q.push({-1, -1});
                    time++;
                    continue;
                }
            }
            // cout<<time<< " "<< tomato.first<<" "<<tomato.second<<"\n";
            for(int i=0; i<4; i++)
            {
                int r = tomato.first+dir[i];
                int c = tomato.second+dir[i+1];
                
                if(r>=0 and c>=0 and r<m and c<n and grid[r][c] == 1)
                {
                    q.push({r, c});
                    grid[r][c] = 2;
                    fresh--;
                }
            }
        }
        if(fresh>0)
            return -1;
        return time;
    }
};
